openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UsersController_findAll
      summary: Get all users
      description: Get all users
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Users
    post:
      operationId: UsersController_create
      summary: Create user
      description: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Users
    put:
      operationId: UsersController_updatePassword
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: The user has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: User not found
      security:
        - bearer: []
      tags:
        - Users
  /user/{id}:
    get:
      operationId: UsersController_findOneById
      summary: Get one User by id
      description: Find one User by its id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
      security:
        - bearer: []
      tags:
        - Users
    delete:
      operationId: UsersController_deleteUser
      summary: Delete user
      description: Deletes user by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The user has been deleted
        '401':
          description: Unauthorized
        '404':
          description: User not found
      security:
        - bearer: []
      tags:
        - Users
  /login:
    post:
      operationId: AuthController_login
      summary: Login
      description: Logins a user and returns a JWT-token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDto'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '403':
          description: Incorrect login or password
      tags:
        - Login
  /track:
    get:
      operationId: TracksController_findAll
      summary: Get all tracks
      description: Gets all library tracks list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Tracks
    post:
      operationId: TracksController_create
      summary: Add new track
      description: Add new track to library
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Tracks
  /track/{id}:
    get:
      operationId: TracksController_findOneById
      summary: Get one Track by id
      description: Find one library Track by its id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Tracks
    put:
      operationId: TracksController_update
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Tracks
    delete:
      operationId: TracksController_delete
      summary: Delete track
      description: Deletes track from library by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The track has been deleted
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Tracks
  /album:
    get:
      operationId: AlbumsController_findAll
      summary: Get all albums
      description: Gets all library albums list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Albums
    post:
      operationId: AlbumsController_create
      summary: Add new album
      description: Add new album to library
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Albums
  /album/{id}:
    get:
      operationId: AlbumsController_findOneById
      summary: Get one album by id
      description: Find one library album by its id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '401':
          description: Unauthorized
        '404':
          description: Album not found
      security:
        - bearer: []
      tags:
        - Albums
    put:
      operationId: AlbumsController_update
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Album not found
      security:
        - bearer: []
      tags:
        - Albums
    delete:
      operationId: AlbumsController_delete
      summary: Delete album
      description: Deletes album from library by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The album has been deleted
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Albums
  /album/{id}/tracks/{trackId}:
    post:
      operationId: AlbumsController_addTrackToAlbum
      summary: Add track to album
      description: Add track to album by UUID
      parameters: []
      responses:
        '201':
          description: ''
        '204':
          description: The track has been added to album
        '401':
          description: Unauthorized
        '404':
          description: Track not found | Album not found
      security:
        - bearer: []
      tags:
        - Albums
        - Tracks
    delete:
      operationId: AlbumsController_removeTrackFromAlbum
      summary: Remove track from album
      description: Remove track from album by UUID
      parameters: []
      responses:
        '200':
          description: ''
        '204':
          description: The track has been removed from album
        '401':
          description: Unauthorized
        '404':
          description: Track not found | Album not found
      security:
        - bearer: []
      tags:
        - Albums
        - Tracks
  /favs:
    get:
      operationId: FavsController_findAll
      summary: ' Get all Favs'
      description: 'Gets all Favs: tracks, books, movies'
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favs'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Favs
  /favs/movie/{id}:
    post:
      operationId: FavsController_addMovieToFavs
      summary: Add Movie to Favs
      description: Add Movie to Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '204':
          description: The Movie has been added to Favs
        '401':
          description: Unauthorized
        '404':
          description: Movie not found
      security:
        - bearer: []
      tags:
        - Favs
  /favs/track/{id}:
    delete:
      operationId: FavsController_removeTrackFromFavs
      summary: Remove track from Favs
      description: Remove track from Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The track has been removed from Favs
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Favs
    post:
      operationId: FavsController_addTrackToFavs
      summary: Add track to Favs
      description: Add track to Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '204':
          description: The track has been added to Favs
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Favs
  /favs/book/{id}:
    post:
      operationId: FavsController_addBookToFavs
      summary: Add Book to Favs
      description: Add Book to Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '204':
          description: The Book has been added to Favs
        '401':
          description: Unauthorized
        '404':
          description: Book not found
      security:
        - bearer: []
      tags:
        - Favs
    delete:
      operationId: FavsController_removeBookFromFavs
      summary: Remove Book from Favs
      description: Remove Book from Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The Book has been removed from Favs
        '401':
          description: Unauthorized
        '404':
          description: Book not found
      security:
        - bearer: []
      tags:
        - Favs
  /favs/album/{id}:
    post:
      operationId: FavsController_addArtistToFavs
      summary: Add Artist to Favs
      description: Add Artist to Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '204':
          description: The Artist has been added to Favs
        '401':
          description: Unauthorized
        '404':
          description: Artist not found
      security:
        - bearer: []
      tags:
        - Favs
    delete:
      operationId: FavsController_removeAlbumFromFavs
      summary: Remove Album from Favs
      description: Remove Album from Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The Album has been removed from Favs
        '401':
          description: Unauthorized
        '404':
          description: Album not found
      security:
        - bearer: []
      tags:
        - Favs
  /favs/artist/{id}:
    delete:
      operationId: FavsController_removeArtistFromFavs
      summary: Remove Artist from Favs
      description: Remove Artist from Favs
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The Artist has been removed from Favs
        '401':
          description: Unauthorized
        '404':
          description: Artist not found
      security:
        - bearer: []
      tags:
        - Favs
  /movie:
    get:
      operationId: MoviesController_findAll
      summary: Get all movies
      description: Gets all library movies list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Movies
    post:
      operationId: MoviesController_create
      summary: Add new Movie
      description: Add new Movie to library
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovieDto'
      responses:
        '201':
          description: The Movie has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Movies
  /movie/{id}:
    get:
      operationId: MoviesController_findOneById
      summary: Get one Movie by id
      description: Find one library Movie by its id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
        '404':
          description: Movie not found
      security:
        - bearer: []
      tags:
        - Movies
    put:
      operationId: MoviesController_update
      summary: Update Movie information
      description: Update library Movie information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieDto'
      responses:
        '200':
          description: The Movie has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Movie not found
      security:
        - bearer: []
      tags:
        - Movies
    delete:
      operationId: MoviesController_delete
      summary: Delete Movie
      description: Deletes Movie from library by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The Movie has been deleted
        '401':
          description: Unauthorized
        '404':
          description: Movie not found
      security:
        - bearer: []
      tags:
        - Movies
  /book:
    get:
      operationId: BooksController_findAll
      summary: Get all Books
      description: Gets all library Books list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Books
    post:
      operationId: BooksController_create
      summary: Add new Book
      description: Add new Book to library
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookDto'
      responses:
        '201':
          description: The Book has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Books
  /book/{id}:
    get:
      operationId: BooksController_findOneById
      summary: Get one Book by id
      description: Find one library Book by its id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
        '404':
          description: Book not found
      security:
        - bearer: []
      tags:
        - Books
    put:
      operationId: BooksController_update
      summary: Update Book information
      description: Update library Book information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookDto'
      responses:
        '200':
          description: The Book has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Book not found
      security:
        - bearer: []
      tags:
        - Books
    delete:
      operationId: BooksController_delete
      summary: Delete Book
      description: Deletes Book from library by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The Book has been deleted
        '401':
          description: Unauthorized
        '404':
          description: Book not found
      security:
        - bearer: []
      tags:
        - Books
  /artist:
    get:
      operationId: ArtistsController_findAll
      summary: Get all Artists
      description: Gets all library Artists list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Artists
    post:
      operationId: ArtistsController_create
      summary: Add new Artist
      description: Add new Artist to library
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The Artist has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Artists
  /artist/{id}:
    get:
      operationId: ArtistsController_findOneById
      summary: Get one Artist by id
      description: Find one library Artist by its id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '401':
          description: Unauthorized
        '404':
          description: Artist not found
      security:
        - bearer: []
      tags:
        - Artists
    put:
      operationId: ArtistsController_update
      summary: Update Artist information
      description: Update library Artist information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The Artist has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Artist not found
      security:
        - bearer: []
      tags:
        - Artists
    delete:
      operationId: ArtistsController_delete
      summary: Delete Artist
      description: Deletes Artist from library by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: The Artist has been deleted
        '401':
          description: Unauthorized
        '404':
          description: Track not found
      security:
        - bearer: []
      tags:
        - Artists
info:
  title: Home Library Service
  description: Home video, music and book library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        password:
          type: string
        version:
          type: number
      required:
        - id
        - login
        - password
        - version
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          minLength: 4
          maxLength: 20
          description: The user's login
        password:
          type: string
          pattern: /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*])(?=.{8,})/
          minLength: 4
          maxLength: 20
          description: The user's password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        id:
          type: string
          description: The user's uuid
        oldPassword:
          type: string
          pattern: /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*])(?=.{8,})/
          minLength: 4
          maxLength: 20
          description: The user's old password
        password:
          type: string
          pattern: /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*])(?=.{8,})/
          minLength: 4
          maxLength: 20
          description: The user's new password
      required:
        - id
        - oldPassword
        - password
    CredentialsDto:
      type: object
      properties:
        username:
          type: string
          description: The user's login
        password:
          type: string
          description: The user's password
      required:
        - username
        - password
    AuthTokenResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    Track:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artist:
          $ref: '#/components/schemas/Artist'
        album:
          $ref: '#/components/schemas/Album'
        duration:
          type: number
        version:
          type: number
      required:
        - id
        - name
        - artist
        - album
        - duration
        - version
    Album:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artist:
          $ref: '#/components/schemas/Artist'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        version:
          type: number
      required:
        - id
        - name
        - artist
        - tracks
        - version
    Artist:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
        albums:
          type: array
          items:
            required: true
            type: array
            items:
              $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        version:
          type: number
      required:
        - id
        - name
        - grammy
        - albums
        - tracks
        - version
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 20
        duration:
          type: number
          minimum: 0
        artistId:
          type: string
        albumId:
          type: string
      required:
        - name
        - duration
        - artistId
        - albumId
    UpdateTrackDto:
      type: object
      properties: {}
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 20
        year:
          type: number
          minimum: 0
        artistId:
          type: string
        trackIds:
          type: array
          items:
            type: string
      required:
        - name
        - year
        - artistId
        - trackIds
    UpdateAlbumDto:
      type: object
      properties: {}
    Movie:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        duration:
          type: number
        genre:
          type: string
          enum:
            - Action
            - Crime
            - Fantasy
            - Horror
            - Romance
            - Science Fiction
            - Comedy
            - Sports
            - Thriller
            - War
            - Western
        version:
          type: number
      required:
        - id
        - name
        - year
        - duration
        - genre
        - version
    Book:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        author:
          type: string
        genre:
          type: string
          enum:
            - Adventure
            - Classics
            - Comics
            - Detective
            - Mystery
            - Fantasy
            - Historical
            - Horror
            - Fiction
        version:
          type: number
      required:
        - id
        - name
        - year
        - genre
        - version
    Favs:
      type: object
      properties:
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        version:
          type: number
      required:
        - tracks
        - movies
        - books
        - version
    CreateMovieDto:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 20
        year:
          type: number
          minimum: 0
        duration:
          type: number
          minimum: 0
        genre:
          type: object
      required:
        - name
        - year
        - duration
        - genre
    UpdateMovieDto:
      type: object
      properties: {}
    CreateBookDto:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 20
        year:
          type: number
          minimum: 0
        author:
          type: string
          minLength: 4
          maxLength: 20
        genre:
          type: object
      required:
        - name
        - year
        - author
        - genre
    UpdateBookDto:
      type: object
      properties: {}
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 20
        grammy:
          type: boolean
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties: {}
