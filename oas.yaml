openapi: 3.0.0
paths:
  /users:
    get:
      operationId: UsersController_findAll
      summary: Get all users
      description: Get all users
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Users
    post:
      operationId: UsersController_create
      summary: Create user
      description: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Users
    put:
      operationId: UsersController_updatePassword
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: The user has been updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - bearer: []
      tags:
        - Users
  /users/{id}:
    delete:
      operationId: UsersController_deleteUser
      summary: Delete user
      description: Deletes user by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The user has been deleted
        '401':
          description: Unauthorized
        '404':
          description: User not found
      security:
        - bearer: []
      tags:
        - Users
  /login:
    post:
      operationId: AuthController_login
      summary: Login
      description: Logins a user and returns a JWT-token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDto'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '403':
          description: Incorrect login or password
      tags:
        - Login
info:
  title: Home Library Service
  description: Home video, music and book library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        password:
          type: string
        version:
          type: number
        createdAt:
          type: string
        updtedAt:
          type: string
      required:
        - id
        - login
        - password
        - version
        - createdAt
        - updtedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          minLength: 4
          maxLength: 20
          description: The user's login
        password:
          type: string
          pattern: /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*])(?=.{8,})/
          minLength: 4
          maxLength: 20
          description: The user's password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        id:
          type: string
          description: The user's uuid
        oldPassword:
          type: string
          pattern: /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*])(?=.{8,})/
          minLength: 4
          maxLength: 20
          description: The user's old password
        password:
          type: string
          pattern: /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%\^&\*])(?=.{8,})/
          minLength: 4
          maxLength: 20
          description: The user's new password
      required:
        - id
        - oldPassword
        - password
    CredentialsDto:
      type: object
      properties:
        username:
          type: string
          description: The user's login
        password:
          type: string
          description: The user's password
      required:
        - username
        - password
    AuthTokenResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
